# Generated by Django 2.0.5 on 2018-05-31 04:26

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, max_length=100, null=True, verbose_name='昵称')),
                ('avatar_url', models.URLField(blank=True, null=True, verbose_name='用户图像URL')),
                ('phone_num', models.CharField(blank=True, max_length=25, null=True, verbose_name='手机号码')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='城市')),
                ('province', models.CharField(blank=True, max_length=100, null=True, verbose_name='省份')),
                ('country', models.CharField(default='china', max_length=100, verbose_name='国家')),
                ('qq', models.CharField(blank=True, max_length=20, null=True, verbose_name='QQ 号码')),
                ('wechat', models.CharField(blank=True, max_length=50, null=True, verbose_name='微信号')),
                ('signature', models.CharField(blank=True, default='', max_length=4096)),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='地址')),
                ('sex', models.CharField(blank=True, choices=[('F', '女性'), ('M', '男性')], max_length=1, null=True, verbose_name='性别')),
                ('language', models.CharField(default='zh-hans', max_length=50, verbose_name='语言')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
            },
        ),
        migrations.CreateModel(
            name='Acknowledgement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_acknowledge', models.BooleanField(default=True, verbose_name='是否支持')),
                ('acknowledgeTime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='确认时间')),
            ],
            options={
                'verbose_name': '打卡确认',
                'verbose_name_plural': '打卡确认',
            },
        ),
        migrations.CreateModel(
            name='CarouselFigure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.ImageField(upload_to='carousel/', verbose_name='上传图片')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='图片说明')),
                ('link', models.CharField(blank=True, max_length=256, null=True, verbose_name='链接')),
                ('is_published', models.BooleanField(default=False, verbose_name='是否显示')),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='添加时间')),
            ],
            options={
                'verbose_name': '轮播图',
                'verbose_name_plural': '轮播图',
            },
        ),
        migrations.CreateModel(
            name='Clock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('clockTime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='打卡时间')),
                ('content', models.CharField(max_length=256, verbose_name='内容')),
                ('isConfirm', models.BooleanField(default=False, verbose_name='打卡是否确认')),
            ],
            options={
                'verbose_name': '打卡记录',
                'verbose_name_plural': '打卡记录',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=4096, verbose_name='评论内容')),
                ('commentTime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='评论时间')),
                ('flag', models.CharField(blank=True, max_length=256, null=True, verbose_name='层级标签')),
                ('clock', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='goals.Clock', verbose_name='打卡内容')),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childs', to='goals.Comment', verbose_name='上级评论')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='评论者')),
            ],
            options={
                'verbose_name': '评论',
                'verbose_name_plural': '评论',
            },
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=256, verbose_name='目标内容')),
                ('conMoney', models.FloatField(verbose_name='小信心金额')),
                ('minSupMoney', models.FloatField(default=0.0, verbose_name='最小支持金额')),
                ('goalType', models.PositiveSmallIntegerField(choices=[(0, '阶段性目标'), (1, '一次性目标')], default='onetime', help_text='0:阶段性目标,1:一次性目标', verbose_name='目标类型')),
                ('createdTime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='创建时间')),
                ('finishedTime', models.DateTimeField(verbose_name='完成时间')),
                ('poster_template', models.ImageField(blank=True, null=True, upload_to='', verbose_name='目标海报模板')),
                ('poster', models.ImageField(blank=True, null=True, upload_to='', verbose_name='目标海报')),
                ('goalStatus', models.SmallIntegerField(choices=[(-1, '失败'), (0, '待激活'), (1, '进行中'), (2, '完成')], default=0, help_text='-1:失败,0:待激活,1:进行中,2:完成', verbose_name='目标状态')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='USER')),
            ],
            options={
                'verbose_name': '目标',
                'verbose_name_plural': '目标',
            },
        ),
        #To tackle the migrate error"FieldNotExist" 18.7.18 chrisyang
        #migrations.RemoveField(model_name='Goal', name='supMoney'),
        migrations.CreateModel(
            name='Opinion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isLike', models.BooleanField(default=True, verbose_name='赞与否')),
                ('createTime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='创建时间')),
                ('clock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='opinions', to='goals.Clock', verbose_name='打卡')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '点赞',
                'verbose_name_plural': '点赞',
            },
        ),
        migrations.CreateModel(
            name='Picture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='upload/', verbose_name='图片')),
                ('uploadTime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='上传时间')),
                ('clock', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pictures', to='goals.Clock', verbose_name='打卡记录')),
            ],
            options={
                'verbose_name': '图片',
                'verbose_name_plural': '图片',
            },
        ),
        migrations.CreateModel(
            name='Supervise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('supMoney', models.FloatField(default=0.0, verbose_name='支持金额')),
                ('createdTime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='开始监督时间')),
                ('goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='supervise', to='goals.Goal', verbose_name='目标')),
                ('supervisor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='USER')),
            ],
            options={
                'verbose_name': '目标监督',
                'verbose_name_plural': '目标监督',
            },
        ),
        migrations.CreateModel(
            name='TransactionRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operateType', models.CharField(choices=[('freeze', '冻结'), ('recharge', '充值'), ('withdrawCash', '提现'), ('reward', '奖励')], default='recharge', help_text="'freeze':u'冻结','recharge':u'充值','withdrawCash': u'提现','reward':u'奖励'", max_length=15, verbose_name='操作类型')),
                ('amount', models.FloatField(verbose_name='操作金额')),
                ('description', models.CharField(blank=True, max_length=4096, null=True, verbose_name='交易描述')),
                ('status', models.CharField(choices=[('done', '已完成'), ('ongoing', '进行中')], default='done', max_length=10, verbose_name='交易状态')),
                ('createdTime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='交易创建时间')),
                ('finishedTime', models.DateTimeField(blank=True, null=True, verbose_name='交易完成时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='USER')),
            ],
            options={
                'verbose_name': '交易记录',
                'verbose_name_plural': '交易记录',
            },
        ),
        migrations.CreateModel(
            name='Wallet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('banlance', models.FloatField(default=0, verbose_name='账户余额')),
                ('createdTime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='钱包创建时间')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='USER')),
            ],
            options={
                'verbose_name': '钱包',
                'verbose_name_plural': '钱包',
            },
        ),
        migrations.AddField(
            model_name='clock',
            name='goal',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='goals.Goal', unique_for_date='clockTime', verbose_name='目标'),
        ),
        migrations.AddField(
            model_name='clock',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='USER'),
        ),
        migrations.AddField(
            model_name='acknowledgement',
            name='clock',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='acknowledgements', to='goals.Clock', verbose_name='打卡内容'),
        ),
        migrations.AddField(
            model_name='acknowledgement',
            name='supervisor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='监督者'),
        ),
        migrations.AlterUniqueTogether(
            name='supervise',
            unique_together={('supervisor', 'goal')},
        ),
        migrations.AlterUniqueTogether(
            name='opinion',
            unique_together={('user', 'clock')},
        ),
        migrations.AlterUniqueTogether(
            name='acknowledgement',
            unique_together={('supervisor', 'clock')},
        ),
    ]
